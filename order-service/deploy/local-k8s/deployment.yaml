apiVersion: v1
kind: ConfigMap
metadata:
  name: order-init-sql
  namespace: local
data:
  create-order-db.sql: |
    SELECT 'CREATE DATABASE order'
    WHERE NOT EXISTS (SELECT
                      FROM pg_database
                      WHERE datname = 'order')
    \gexec

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: local
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      volumes:
        - name: init-sql
          configMap:
            name: order-init-sql
      initContainers:
        - name: init-db
          image: postgres:16
          command: [ "sh", "-c" ]
          args:
            - |
              echo "Waiting for PostgreSQL to be ready...";
              until pg_isready -h $(DATABASE_HOST) -U $(DATABASE_USERNAME); do
                sleep 2;
              done;
              echo "Running DB init script...";
              export PGPASSWORD=$DATABASE_PASSWORD;
              psql -h $(DATABASE_HOST) -U $(DATABASE_USERNAME) -f /sql/create-order-db.sql postgres
          envFrom:
            - configMapRef:
                name: order-service-config
            - secretRef:
                name: order-service-secrets
          volumeMounts:
            - name: init-sql
              mountPath: /sql

      containers:
        - name: order-service
          image: docker.io/cgayet/order-service:0.0.1
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: order-service-config
            - secretRef:
                name: order-service-secrets